{"version":3,"sources":["components/layout/index.js","pages/todo/index.js","services/api.js","containers/todo.js","index.js"],"names":["TodoPage","props","react_default","a","createElement","Fragment","navbar","className","Classes","DARK","navbarGroup","align","Alignment","LEFT","navbarHeading","children","items","onNewItem","onRemoveItem","newItemText","onChangeNewItemText","onExitEditMode","onEnterEditMode","onToggleItemComplete","error","layout","card","html","buttons","text","intent","Intent","PRIMARY","icon","onClick","callout","DANGER","divider","map","item","key","id","small","isEditting","inputGroup","placeholder","value","onChange","onBlur","inputRef","ref","focus","controls","checked","isChecked","concat","baseUrl","request","_callee","url","method","data","response","jsonResponse","regenerator_default","wrap","_context","prev","next","fetch","headers","Accept","Content-Type","body","JSON","stringify","undefined","sent","json","status","errors","message","Error","abrupt","stop","this","update","Todo","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","bind","assertThisInitialized","setState","t0","newItem","toConsumableArray","objectSpread","_context2","index","findIndex","n","newItems","slice","console","log","splice","_context3","event","target","updateItem","_context4","_context5","_this$state2","todo","React","Component","ReactDOM","render","containers_todo","document","getElementById"],"mappings":"uVAyBeA,MAff,SAAkBC,GAChB,OACEC,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACIH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAQC,UAAWC,IAAQC,MACzBP,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAaC,MAAOC,IAAUC,MAC5BX,EAAAC,EAAAC,cAACU,EAAA,EAAD,mBAGJZ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,QACZN,EAAMc,kFC8EFf,MAjFf,SAAkBC,GAAM,IAEpBe,EASEf,EATFe,MACAC,EAQEhB,EARFgB,UACAC,EAOEjB,EAPFiB,aACAC,EAMElB,EANFkB,YACAC,EAKEnB,EALFmB,oBACAC,EAIEpB,EAJFoB,eACAC,EAGErB,EAHFqB,gBACAC,EAEEtB,EAFFsB,qBACAC,EACEvB,EADFuB,MAGF,OACEtB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACqB,EAAD,KACEvB,EAAAC,EAAAC,cAACsB,EAAA,EAAD,KACExB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,aAEAzB,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CACEC,KAAK,WACLC,OAAQC,IAAOC,QACfC,KAAK,aACL1B,UAAU,gBACV2B,QAASjB,IAGTO,GACAtB,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,CAASL,OAAQC,IAAOK,QAAxB,SAKFlC,EAAAC,EAAAC,cAACiC,EAAA,EAAD,MAEAnC,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAIpB,UAAU,aACXS,EAAMsB,IAAI,SAAAC,GAAI,OACbrC,EAAAC,EAAAC,cAAA,MAAIG,UAAU,YAAYiC,IAAKD,EAAKE,IAClCvC,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CACEc,OAAK,EACLT,KAAK,SACLH,OAAO,SACPvB,UAAU,mBACV2B,QAAS,kBAAMhB,EAAaqB,MAE7BA,EAAKI,WACJzC,EAAAC,EAAAC,cAACwC,EAAA,EAAD,CACEF,OAAK,EACLnC,UAAU,sBACVsC,YAAY,gBACZC,MAAO3B,EACP4B,SAAU3B,EACV4B,OAAQ,kBAAM3B,EAAekB,IAC7BU,SAAU,SAAAC,GAAG,OAAIA,GAAOA,EAAIC,WAG9BjD,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACEH,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CACE7C,UAAU,kBACV8C,QAASd,EAAKe,UACdpB,QAAS,kBAAMX,EAAqBgB,MAEtCrC,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CACEpB,UAAS,mBAAAgD,OAAqBhB,EAAKe,UAAY,OAAS,IACxDpB,QAAS,kBAAMZ,EAAgBiB,KAE9BA,EAAKV,eClFtB2B,EAAU,iCAEDC,mFAAf,SAAAC,EAAuBC,EAAKC,EAAQC,GAApC,IAAAC,EAAAC,EAAAvC,EAAA,OAAAwC,EAAA7D,EAAA8D,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAC2BC,MAAK,GAAAd,OAAKC,GAALD,OAAeI,GAAO,CAC9CC,SACAU,QAAS,CACLC,OAAU,mBACVC,eAAgB,oBAEpBC,KAAMZ,EAAOa,KAAKC,UAAUd,QAAQe,IAP5C,cACUd,EADVI,EAAAW,KAAAX,EAAAE,KAAA,EAS+BN,EAASgB,OATxC,UASUf,EATVG,EAAAW,KAW4B,MAApBf,EAASiB,OAXjB,CAAAb,EAAAE,KAAA,cAcWL,GAAgBA,EAAaiB,SAC5BxD,EAAQuC,EAAaiB,OAAO,GAAGC,SAG7BC,MAAM1D,GAAS,sBAlB7B,cAAA0C,EAAAiB,OAAA,SAqBWpB,EAAaF,MArBxB,yBAAAK,EAAAkB,SAAA1B,EAAA2B,gCAgCO,SAASC,EAAO7C,EAAIoB,GACvB,OAAOJ,EAAO,SAAAF,OAAUd,GAAM,OAAQoB,OCqI3B0B,cAjKb,SAAAA,EAAYtF,GAAM,IAAAuF,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAJ,KAAAE,IAChBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAJ,KAAAI,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAR,KAAMpF,KAED6F,MAAQ,CACXtE,MAAO,GACPR,MAAO,GACPG,YAAa,IAGfqE,EAAKvE,UAAYuE,EAAKvE,UAAU8E,KAAfN,OAAAO,EAAA,EAAAP,QAAAO,EAAA,EAAAP,CAAAD,KACjBA,EAAKtE,aAAesE,EAAKtE,aAAa6E,KAAlBN,OAAAO,EAAA,EAAAP,QAAAO,EAAA,EAAAP,CAAAD,KACpBA,EAAKpE,oBAAsBoE,EAAKpE,oBAAoB2E,KAAzBN,OAAAO,EAAA,EAAAP,QAAAO,EAAA,EAAAP,CAAAD,KAC3BA,EAAKnE,eAAiBmE,EAAKnE,eAAe0E,KAApBN,OAAAO,EAAA,EAAAP,QAAAO,EAAA,EAAAP,CAAAD,KACtBA,EAAKlE,gBAAkBkE,EAAKlE,gBAAgByE,KAArBN,OAAAO,EAAA,EAAAP,QAAAO,EAAA,EAAAP,CAAAD,KACvBA,EAAKjE,qBAAuBiE,EAAKjE,qBAAqBwE,KAA1BN,OAAAO,EAAA,EAAAP,QAAAO,EAAA,EAAAP,CAAAD,KAdZA,0NDwBT/B,EAAQ,QAAS,cCLhBzC,SAENqE,KAAKY,SAAS,CAAEjF,0DAEhBqE,KAAKY,SAAS,CAACzE,MAAO0C,EAAAgC,GAAMjB,gSDHvBxB,EAAQ,QAAS,OCSO,CAAE5B,KAAM,GAAIyB,WAAW,WAA9C6C,SAENd,KAAKY,SAAS,CACZjF,MAAMyE,OAAAW,EAAA,EAAAX,CACDJ,KAAKS,MAAM9E,OADXuC,OAAA,CAAAkC,OAAAY,EAAA,EAAAZ,CAAA,GAGEU,EAHF,CAIDxD,YAAY,wDAKlB0C,KAAKY,SAAS,CAACzE,MAAO8E,EAAAJ,GAAMjB,kMAIb1C,sGDdEE,ECgBJF,EAAKE,GDfbgB,EAAO,SAAAF,OAAUd,GAAM,oBCiBpBzB,EAAUqE,KAAKS,MAAf9E,OAIM,KAFRuF,EAAQvF,EAAMwF,UAAU,SAAAC,GAAC,OAAIA,EAAEhE,KAAOF,EAAKE,uDAM3CiE,EAAW1F,EAAM2F,QACvBC,QAAQC,IAAIH,GACZA,EAASI,OAAOP,EAAO,GAEvBlB,KAAKY,SAAS,CAAEjF,MAAO0F,sDAEvBrB,KAAKY,SAAS,CAACzE,MAAOuF,EAAAb,GAAMjB,4CDhC3B,IAAgBxC,wHCoCDuE,GAClB3B,KAAKY,SAAS,CAAE9E,YAAa6F,EAAMC,OAAOnE,uFAGvBP,iGAMb8C,KAAKS,MAFP9E,UACAG,yBAGuBmE,EAAO/C,EAAKE,GAAI,CAAEZ,KAAMV,WAA3C+F,SAEN7B,KAAKY,SAAS,CACZ9E,YAAa,GACbH,MAAOA,EAAMsB,IAAI,SAAC8B,GAChB,OAAIA,EAAK3B,KAAOF,EAAKE,GACZgD,OAAAY,EAAA,EAAAZ,CAAA,GACFyB,EADL,CAEEvE,YAAY,IAGTyB,sDAIXiB,KAAKY,SAAS,CAACzE,MAAO2F,EAAAjB,GAAMjB,8JAIhB1C,GAAK,IAEjBvB,EACEqE,KAAKS,MADP9E,MAGFqE,KAAKY,SAAS,CACZ9E,YAAaoB,EAAKV,KAClBb,MAAOA,EAAMsB,IAAI,SAAC8B,GAChB,OAAIA,EAAK3B,KAAOF,EAAKE,GACZgD,OAAAY,EAAA,EAAAZ,CAAA,GACFrB,EADL,CAEEzB,YAAY,IAGTyB,2FAKc7B,oGAEE+C,EAAO/C,EAAKE,GAAI,CAAEa,WAAYf,EAAKe,mBAAtD4D,SAGJlG,EACEqE,KAAKS,MADP9E,MAGFqE,KAAKY,SAAS,CACZjF,MAAOA,EAAMsB,IAAI,SAAC8B,GAChB,OAAIA,EAAK3B,KAAOF,EAAKE,GACZyE,EAEF9C,sDAIXiB,KAAKY,SAAS,CAACzE,MAAO4F,EAAAlB,GAAMjB,uJAIxB,IAAAoC,EAKFhC,KAAKS,MAHP9E,EAFIqG,EAEJrG,MACAG,EAHIkG,EAGJlG,YACAK,EAJI6F,EAIJ7F,MAGF,OACEtB,EAAAC,EAAAC,cAACkH,EAAD,CACEtG,MAAOA,EACPC,UAAWoE,KAAKpE,UAChBC,aAAcmE,KAAKnE,aACnBE,oBAAqBiE,KAAKjE,oBAC1BD,YAAaA,EACbE,eAAgBgE,KAAKhE,eACrBC,gBAAiB+D,KAAK/D,gBACtBC,qBAAsB8D,KAAK9D,qBAC3BC,MAAOA,WA7JI+F,IAAMC,WCDzBC,IAASC,OAAOxH,EAAAC,EAAAC,cAACuH,EAAD,MAAUC,SAASC,eAAe","file":"static/js/main.d6b80ef9.chunk.js","sourcesContent":["import React from 'react'; \r\nimport {\r\n  Alignment,\r\n  Classes,\r\n  Navbar,\r\n  NavbarGroup,\r\n  NavbarHeading,\r\n} from \"@blueprintjs/core\";\r\nimport './style.css'; \r\n\r\nfunction TodoPage(props) {\r\n  return (\r\n    <React.Fragment>\r\n        <Navbar className={Classes.DARK}>\r\n          <NavbarGroup align={Alignment.LEFT}>\r\n            <NavbarHeading>Todo App</NavbarHeading>\r\n          </NavbarGroup>\r\n        </Navbar>\r\n        <div className=\"page\">\r\n          {props.children}\r\n        </div>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default TodoPage; ","import React from 'react';\r\nimport Layout from '../../components/layout';\r\nimport {\r\n  Card,\r\n  H2,\r\n  Divider,\r\n  UL,\r\n  Button,\r\n  Checkbox,\r\n  Label,\r\n  InputGroup,\r\n  Intent,\r\n  Callout,\r\n} from '@blueprintjs/core'; \r\nimport './style.css';\r\n\r\nfunction TodoPage(props){\r\n  const {\r\n    items,\r\n    onNewItem,\r\n    onRemoveItem,\r\n    newItemText,\r\n    onChangeNewItemText,\r\n    onExitEditMode,\r\n    onEnterEditMode,\r\n    onToggleItemComplete,\r\n    error\r\n  } = props; \r\n\r\n  return (\r\n    <div>\r\n      <Layout>\r\n        <Card>\r\n          <H2>TODO</H2>\r\n\r\n          <Button\r\n            text=\"New Item\"\r\n            intent={Intent.PRIMARY}\r\n            icon=\"new-object\"\r\n            className=\"new-todo-item\"\r\n            onClick={onNewItem}\r\n          />\r\n\r\n          { error && \r\n            <Callout intent={Intent.DANGER}> \r\n              error \r\n            </Callout>\r\n          }\r\n\r\n          <Divider />\r\n          \r\n          <UL className=\"todo-list\">\r\n            {items.map(item => \r\n              <li className=\"todo-item\" key={item.id}>\r\n                <Button\r\n                  small\r\n                  icon=\"remove\"\r\n                  intent=\"danger\"\r\n                  className=\"todo-item-action\"\r\n                  onClick={() => onRemoveItem(item)}\r\n                />\r\n                {item.isEditting ? \r\n                  <InputGroup\r\n                    small\r\n                    className=\"todo-item-text-edit\"\r\n                    placeholder=\"Item text ...\"\r\n                    value={newItemText}\r\n                    onChange={onChangeNewItemText}\r\n                    onBlur={() => onExitEditMode(item)}\r\n                    inputRef={ref => ref && ref.focus()}\r\n                  />\r\n                  :\r\n                  <React.Fragment>\r\n                    <Checkbox \r\n                      className=\"todo-item-label\"\r\n                      checked={item.isChecked}\r\n                      onClick={() => onToggleItemComplete(item)}\r\n                    />\r\n                    <Label \r\n                      className={`todo-item-label ${item.isChecked ? 'done' : '' }`}\r\n                      onClick={() => onEnterEditMode(item)}\r\n                    >\r\n                      {item.text}\r\n                    </Label>\r\n                  </React.Fragment>\r\n                  \r\n                }\r\n                \r\n              </li>\r\n            )}\r\n          </UL>\r\n        </Card>\r\n      </Layout>\r\n    </div>\r\n  ); \r\n}\r\n\r\nexport default TodoPage; ","const baseUrl = 'http://localhost:4000';\r\n\r\nasync function request(url, method, data) {\r\n    const response = await fetch (`${baseUrl}${url}`, {\r\n        method,\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: data ? JSON.stringify(data) : undefined,\r\n    });\r\n    const jsonResponse = await response.json(); \r\n\r\n    if (response.status !== 200 ) {\r\n        let error;\r\n\r\n        if(jsonResponse && jsonResponse.errors) {\r\n            error = jsonResponse.errors[0].message; \r\n        }\r\n\r\n        throw Error(error || 'There was an error')\r\n    }\r\n\r\n    return jsonResponse.data; \r\n}\r\n\r\nexport function create(data) {\r\n    return request('/todo', 'POST', data); \r\n}\r\n\r\nexport function read() {\r\n    return request('/todo', 'GET'); \r\n}\r\n\r\nexport function update(id, data) {\r\n    return request(`/todo/${id}`, 'POST', data); \r\n}\r\n\r\nexport function remove(id) {\r\n    return request(`/todo/${id}`, 'DELETE'); \r\n}","import React from 'react';\r\nimport TodoPage from '../pages/todo'; \r\nimport {create, read, update, remove} from '../services/api'\r\n\r\n\r\nclass Todo extends React.Component {\r\n  \r\n  constructor(props){\r\n    super(props);\r\n    \r\n    this.state = {\r\n      error: '',\r\n      items: [],\r\n      newItemText: ''\r\n    };\r\n\r\n    this.onNewItem = this.onNewItem.bind(this);\r\n    this.onRemoveItem = this.onRemoveItem.bind(this);\r\n    this.onChangeNewItemText = this.onChangeNewItemText.bind(this); \r\n    this.onExitEditMode = this.onExitEditMode.bind(this); \r\n    this.onEnterEditMode = this.onEnterEditMode.bind(this);\r\n    this.onToggleItemComplete = this.onToggleItemComplete.bind(this);\r\n  }\r\n\r\n  async componentDidMount() {\r\n    try {\r\n      const items = await read(); \r\n\r\n      this.setState({ items }); \r\n    } catch (error) {\r\n      this.setState({error: error.message}); \r\n    }\r\n  }\r\n\r\n  async onNewItem() {\r\n    try {\r\n      const newItem = await create({ text: '', isChecked: false});\r\n\r\n      this.setState({\r\n        items: [\r\n          ...this.state.items,\r\n          {\r\n            ...newItem,\r\n            isEditting: true,\r\n          },\r\n        ],\r\n      })\r\n    } catch (error) {\r\n      this.setState({error: error.message}); \r\n    } \r\n  } \r\n\r\n  async onRemoveItem(item) {\r\n    try {\r\n      await remove(item.id); \r\n\r\n      const { items } = this.state;\r\n\r\n      const index = items.findIndex(n => n.id === item.id);\r\n\r\n      if(index === -1){\r\n        return;\r\n      }\r\n\r\n      const newItems = items.slice();\r\n      console.log(newItems)\r\n      newItems.splice(index, 1); \r\n\r\n      this.setState({ items: newItems }); \r\n    } catch (error) {\r\n      this.setState({error: error.message}); \r\n    }\r\n  }\r\n\r\n  onChangeNewItemText(event) {\r\n    this.setState({ newItemText: event.target.value }); \r\n  }\r\n\r\n  async onExitEditMode(item) {\r\n    try {\r\n\r\n      const {\r\n        items,\r\n        newItemText,\r\n      } = this.state;\r\n\r\n      const updateItem = await update(item.id, { text: newItemText}); \r\n\r\n      this.setState({\r\n        newItemText: '',\r\n        items: items.map((next) => {\r\n          if (next.id === item.id) {\r\n            return {\r\n              ...updateItem,\r\n              isEditting: false,\r\n            };\r\n          }\r\n          return next; \r\n        })\r\n      });\r\n    } catch (error) {\r\n      this.setState({error: error.message}); \r\n    } \r\n  }\r\n\r\n  onEnterEditMode(item){\r\n    const {\r\n      items,\r\n    } = this.state;\r\n\r\n    this.setState({\r\n      newItemText: item.text,\r\n      items: items.map((next) => {\r\n        if (next.id === item.id) {\r\n          return {\r\n            ...next,\r\n            isEditting: true,\r\n          };\r\n        }\r\n        return next; \r\n      })\r\n    })\r\n  }\r\n\r\n  async onToggleItemComplete(item) {\r\n    try {\r\n      const updateItem = await update(item.id, { isChecked: !item.isChecked }); \r\n\r\n      const {\r\n        items,\r\n      } = this.state;\r\n\r\n      this.setState({\r\n        items: items.map((next) => {\r\n          if (next.id === item.id) {\r\n            return updateItem\r\n          }\r\n          return next; \r\n        })\r\n      })\r\n    } catch (error) {\r\n      this.setState({error: error.message}); \r\n    }\r\n  }\r\n\r\n  render(){\r\n    const {\r\n      items,\r\n      newItemText,\r\n      error\r\n    } = this.state; \r\n\r\n    return (\r\n      <TodoPage\r\n        items={items}\r\n        onNewItem={this.onNewItem}\r\n        onRemoveItem={this.onRemoveItem}\r\n        onChangeNewItemText={this.onChangeNewItemText}\r\n        newItemText={newItemText}\r\n        onExitEditMode={this.onExitEditMode}\r\n        onEnterEditMode={this.onEnterEditMode}\r\n        onToggleItemComplete={this.onToggleItemComplete}\r\n        error={error}\r\n      />\r\n    ); \r\n  }\r\n}\r\n\r\nexport default Todo; ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Todo from './containers/todo'\n\nReactDOM.render(<Todo />, document.getElementById('root'));\n\n"],"sourceRoot":""}